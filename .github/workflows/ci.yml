# .github/workflows/ci.yml

name: CI Pipeline - Test and Build # Name of the workflow displayed on GitHub Actions tab

# Controls when the workflow will run
on:
  push: # Run on pushes to the repository
    branches: [ main ] # Only for pushes to the main branch
  pull_request: # Run on pull requests targeting the main branch
    branches: [ main ]
  workflow_dispatch: {} # Allows manual triggering from the Actions tab

jobs:
  build-and-test: # Define a job named 'build-and-test'
    runs-on: ubuntu-latest # Specify the type of runner (virtual machine)

    steps: # Sequence of tasks that make up the job
      - name: Checkout repository # Step 1: Get the code from the repository
        uses: actions/checkout@v4 # Use the official checkout action

      - name: Set up Python 3.10 # Step 2: Set up the Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Match the version used in development/Dockerfile
          cache: 'pip' # Cache dependencies based on requirements.txt hash

      - name: Install dependencies # Step 3: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check formatting with Black # Step 5: Check code formatting
        run: |
          black --check .

      - name: Test with Pytest # Step 6: Run the test suite
        run: |
          pytest

      # --- Optional: Docker Build ---
      # This step verifies that the Dockerfile can build successfully.
      # It does NOT push the image anywhere.
      - name: Set up Docker Buildx # Step 7.1: Required for building Docker images efficiently
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image # Step 7.2: Build the image defined in Dockerfile
        uses: docker/build-push-action@v5
        with:
          context: . # Use the current directory as the build context
          file: ./Dockerfile # Path to the Dockerfile
          push: false # DO NOT push the image (requires login/setup)
          tags: local-build/sentiment-analysis-service:latest # Tag the image locally for identification
          load: true # Load the built image into the runner's Docker daemon (optional but good for build verification)
          cache-from: type=gha # Enable build cache from GitHub Actions cache
          cache-to: type=gha,mode=max # Enable writing build cache